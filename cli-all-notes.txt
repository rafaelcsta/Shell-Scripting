http://blog.evaldojunior.com.br/aulas/blog/shell%20script/2011/05/08/shell-script-parte-2-controle-de-fluxo.html

expr 2 '*' 3
6

for a in {1..9};do for b in {1..9};do for c in $(expr $a '*' $b);do echo "$a por $b = $c";done;done;done

for i in $(ls /);do echo $i;done

!ls
\ls

echo /etc/r*.conf

variaveis

VAR1='ls -lh' (criar)
echo $VAR1 (ver)
$VAR1 (executar)

export VAR1 (torna variavel fixa durante essa sessao do shell)

cat env | grep VAR1

unset VAR1 (remove esta variavel)

echo /etc/*.d
echo /etc/*.???
echo /etc/???
echo /bin/?

echo /etc/[gu]* (liste todos os arquivos que iniciem com letras 'g' e 'u')
echo /etc/[!gu]* (liste os dados do diretorio etc exceto os que começarem com 'g' e 'u')

echo /etc/*[0-9]* liste os que tenham ao menos um número
echo /etc/x*
ls -d /etc/x* (lista todos os arquivos e diretórios que começam com x de /etc/ e de subdiretórios)
ls -r *

ls -lSRht --full-time *
ls -l | more
ls -l | less

cp /etc/hosts .
cp /etc/hosts ~

> file.txt
mkdir diretorio
touch file1.txt file2.txt file3.txt

rm -i *.txt (modo interativo)

tar -cf alpha_files.tar alpha *
tar -czf alpha_files.tar.gz alpha *
gzip -l alpha_files.tar.gz
tar -cjf folders.tbz School
tar -tjf folders.tbz Scholl
bunzip2 -c folders.tbz | tar -t
tar -xjf folders.tbz
tar -xjvf folders.tbz

tar -xjvf folders.tbz School/Art/linux.txt

School/Art/linux.txt

zip alpha_files.zip alpha *
zip -r School.zip (monta no diretorio School)
unzip -l (lista)
unzip School.zip
unzip School.zip School/Math/numbers.txt

tr 'az' 'A-Z' (converte letras minusculas em maiusculas)
grep 'r..f' red.txt
grep '[0-9]' profile.txt
grep '[da]' profile.txt
grep '[^ 0-9]' profile.txt (numero no começo da frase)
grep 'r [oe] * d' red.txt
grep 'e *' red.txt
grep 'r $ 'alpha-first.txt (r no final)
grep 're \ *' newhome.txt (Pattern *)
grep -E 'grey | grey' spelling.txt
grep -E 'sshd | root | operador' passwd
egrep 'no (b | n)' passwd
egrep -v "daemon|root" /etc/passwd (busque exceto)
cat /etc/passwd | grep '[0-9]'
grep -E '[0-9]{3}' /etc/passwd

find /etc -name hosts (estudar o comando find)
read (recebe entrada do teclado durante em scripts) 
Ja "echo $?" retorna 0 se o ultimo comando for executado com sucesso, 1 se ocorrer algum erro de ausencia de args, ou 2 para erros legitimos. equivale a &&.

cat, echo, sort, grep, cut, head, tail, uniq, awk, seq e sed sao comandos para exibir e ou filtrar saidas de texto

test –f /dev/ttyS0	0 se o arquivo existe
test ! –f /dev/ttyS0	0 se o arquivo não existe
test –d /tmp	0 se o diretório existe
test –x `which ls`	substitua a localização de lsentão testse o usuário puder executar
test 1 –eq 1	0 se a comparação numérica for bem-sucedida
test ! 1 –eq 1	NOT – 0 se a comparação falhar
test 1 –ne 1	Mais fácil, testpara desigualdade numérica
test “a” = “a”	0 se a comparação de strings for bem-sucedida
test “a” != “a”	0 se as cordas são diferentes
test 1 –eq 1 –o 2 –eq 2	-o é OR: qualquer um pode ser o mesmo
test 1 –eq 1 –a 2 –eq 2	-a é AND: ambos devem ser iguais

#!/bin/bash

for NAME in Sean Jon Isaac David; do
  echo "Hello $NAME"
done

for S in *; do
  echo "Doing something to $S"
done


#!/bin/bash

i=0
while [ $i -lt 10 ]; do
  echo $i
  i=$(( $i + 1))
done
echo “Done counting”

#Tutorial vi

Ação

:wq - salva e sai
:w namefile - salva o arquivo com tal nome

:w! namefile - Salva aquivo corrente no arquivo especificado

:q - Sai do vi

:q! - Sai sem salvar att realizadas

i - insere texto antes do cursor
a - insere texto depois do cursor
r - insere texto no inicio de onde se encontra o cursor
A - insere texto no final da linha...
o - Adiciona linha abaixo da atual
O - Adiciona linha acima da atual

Movimentação

ctrl+f - Move o cursor para a proxima tela
ctrl+b - Move o cursor para tela anterior
H - Move cursor a primeira linha da tela
M - Move cursor para o meio da tela
L - Move cursor para ultima linha da tela
h - Move cursor um caractere a esquerda
j - Move cursor a proxima linha
k - Move cursor a linha anterior
I - Move cursor ao inicio e insere
w - Move cursor para inicio da prox palavra (ignora pontuação)
W - para o inicio da prox palavra (sem ignorar a pontuação)
b - Move o cursor para o inicio da palavra anterior (ignora pontuação)
B - Move o cursor para o inicio da palavra anterior (sem ignorar pontuação)
0 - Move cursor pro inicio da linha atual
^ - Move cursor ao primeiro crtre não branco da linha atual
$ - Move cursor para o final da linha atual
nG - Move o cursor para linha n do arquivo.
G - Move cursor pra linha final do arquivo

Buscar

/palavra - Busca pela palavra ou caractere em todo o texto

?palavra - Move o cursor para a ocorrência anterior da palavra

n - Repete o ultimo comando / ou ?
N - Repete .... na direção reserva
ctrl+g - Mostra o nome do arquivo, o numero da linha corrente e o total de linhas

Substituição e Deleção

x - Deleta o caractere que esta sob o cursor
dw -  Deleta palavra, da posição atual do cursor até o final ... 2dw  del 2 words
dd - Deleta linha atual
D - Linha da posição atual do cursor até o final
rx - Substitui o caractere sob o cursor ate o final
Rx - Substitui a palavra sob o cursor pela palavra indicada em x
u - Desfaz amodificação
U - Desfaz todas as amodificações
J - Une a linha corrente a proxima
s:/Linux/Unix - substitui a primeira ocorrencia de "Linux" por "Unix"
s:/Linux/Unix/g - Faz a substituição em todo o arquivo. 
Tentar :%s/antiga/nova/g

xxxx exclui 4 caracteres um de cada vez
4u  desfaz as ultimas 4 operacoes
5X shift + x
14x
yw
Shift + p

Vá para a primeira linha e junte as três linhas:
1G
3J

Pesquise e exclua a palavra text(adicione um espaço após a palavra text):
:%s/text //g

1G	Vá para o início do arquivo ( Shift + G )
i	Entrar no modo de inserção
Hello and	Adicione texto ao documento com um espaço após “ and”

ESC escape

l	'L' minúsculo avança um espaço
~	Shift + ` muda a letra para minúscula

:C

j	Descer para a segunda linha
10l	10 seguido por 'L' minúsculo

a	Entre no modo de inserção.
text	texto seguido por um espaço
Saia do modo de inserção pressionando a tecla Esc .

Abra uma linha em branco abaixo da linha atual digitando uma letra minúscula o:

o


Comando	Teclas de função
:x	Vai salvar e fechar o arquivo.
:wq	Irá gravar no arquivo e sair.
:wq!	Gravará em um arquivo somente leitura, se possível, e encerrará.
ZZ	Vai salvar e fechar. Observe que nenhum ponto- :e- vírgula é usado neste caso.
:q!	Saia sem salvar as alterações
:e!	Descartar as alterações e recarregar o arquivo
:w!	Grave como somente leitura, se possível.

Testar com dois ponto iniciando o comando
